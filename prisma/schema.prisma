generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Dashboard {
  id              Int      @id @default(autoincrement())
  userId          String
  createdAt       DateTime @default(now())
  updateAt        DateTime @default(now())
  published       Boolean  @default(false)
  name            String
  coverThumbnail  String?  @db.LongText
  description     String   @default("")
  content         String   @db.LongText
  designWidthEnum String   @default("1920")
  visits          Int      @default(0)
  submissions     Int      @default(0)

  shareURL String @unique @default(uuid())

  @@unique([name])
}

model ApiGroup {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updateAt  DateTime    @default(now())
  name      String
  ApiManage ApiManage[]

  @@unique([name])
}

model ApiBaseName {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updateAt  DateTime    @default(now())
  baseName  String
  ApiManage ApiManage[]

  @@unique([baseName])
}

model ApiOrigin {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updateAt  DateTime    @default(now())
  origin    String
  ApiManage ApiManage[]

  @@unique([origin])
}

model ApiManage {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updateAt    DateTime @default(now())
  name        String
  description String   @default("")

  url        String
  method     String
  groupId    String?
  group      ApiGroup?    @relation(fields: [groupId], references: [id])
  baseNameId String?
  baseName   ApiBaseName? @relation(fields: [baseNameId], references: [id])
  originId   String?
  origin     ApiOrigin?   @relation(fields: [originId], references: [id])
  headers    String?      @db.LongText
  isMock     Boolean?     @default(false)
  mockJson   String?      @db.LongText

  @@unique([name])
}

model ComponentChart {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updateAt    DateTime @default(now())
  published   Boolean  @default(false)
  name        String
  description String   @default("")
  template    String   @db.LongText
  shareURL    String   @unique @default(uuid())

  @@unique([name])
}
