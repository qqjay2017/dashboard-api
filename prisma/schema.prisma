generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Dashboard {
  id              Int      @id @default(autoincrement())
  userId          String
  createdAt       DateTime @default(now())
  updateAt        DateTime @default(now())
  published       Boolean  @default(false)
  name            String
  coverThumbnail  String?  @db.LongText
  description     String   @default("")
  content         String   @db.LongText
  designWidthEnum String   @default("1920")
  visits          Int      @default(0)
  submissions     Int      @default(0)

  shareURL String @unique @default(uuid())

  @@unique([name])
}

model ApiGroup {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
  name      String

  @@unique([name])
}

model ApiBaseName {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
  baseName  String

  @@unique([baseName])
}

model ApiOrigin {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
  origin    String

  @@unique([origin])
}

model ApiManage {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updateAt    DateTime @default(now())
  name        String
  description String   @default("")

  url      String
  method   String
  group    String?
  baseName String?
  origin   String?

  headers  String?  @db.LongText
  isMock   Boolean? @default(false)
  mockJson String?  @db.LongText

  @@unique([name])
}

model ComponentChart {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updateAt       DateTime @default(now())
  published      Boolean  @default(false)
  name           String
  type           String   @default("other")
  description    String   @default("")
  template       String   @db.LongText
  coverThumbnail String?  @db.LongText

  @@unique([name])
}
